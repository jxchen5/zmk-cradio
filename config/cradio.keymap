/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    new_behavior-1:

    new_behavior-1 {
        compatible = "zmk,behavior-mod-morph";
        label = "NEW_BEHAVIOR-1";
        bindings = <&kp PERIOD>, <&kp QUESTION>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
    };

    new_behavior-1:

    new_behavior-1 { compatible = "zmk,behavior-mod-morph"; };
};

keymap {
    compatible = "zmk,keymap";

    default_layer {
        bindings = <
&kp Y    &kp C             &kp L  &kp M          &kp K                 &kp Z      &kp F       &kp U               &kp COMMA          &kp SQT
&lt 1 I  &mt LEFT_SHIFT S  &kp R  &lt 3 T        &kp G                 &kp P      &kp J       &kp K               &mt RIGHT_SHIFT L  &lt 2 O
&kp Q    &kp V             &kp W  &kp D          &kp J                 &kp B      &kp H       &mt LEFT_GUI ENTER  &kp COMMA          &kp DOT
                                  &kp BACKSPACE  &kp NON_US_BACKSLASH  &kp SPACE  &kp DOLLAR
        >;
    };

    left_layer {
        bindings = <
&trans  &trans     &kp LESS_THAN   &kp GREATER_THAN  &trans  &kp DELETE  &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON
&trans  &kp MINUS  &kp UNDERSCORE  &kp DOLLAR        &trans  &kp TAB     &kp LCTRL      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON
&trans  &trans     &trans          &trans            &trans  &trans      &kp TILDE      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE
                                   &trans            &trans  &trans      &trans
        >;
    };

    right_layer {
        bindings = <
&kp ASTERISK  &kp PLUS  &kp N9       &kp N7        &kp HOME  &trans  &kp NUMBER_6  &kp N8        &trans        &trans
&kp SLASH     &kp N5    &kp N0       &kp NUMBER_3  &kp END   &trans  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_4  &trans
&kp ESCAPE    &kp HASH  &kp PERCENT  &kp AT        &trans    &trans  &trans        &trans        &trans        &trans
                                     &trans        &trans    &trans  &trans
        >;
    };

    tri_layer {
        bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans          &trans          &trans
&trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans          &trans          &trans
                        &trans  &trans  &trans          &trans
        >;
    };

    layer_4 {
        bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
        >;
    };

    layer_5 {
        bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
        >;
    };
};

};
