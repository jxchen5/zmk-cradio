/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    tapping-term-ms = <150>;
};

&lt { tapping-term-ms = <150>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    behaviors {
        apos_shift_excl: apos_shift_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_SHIFT_EXCL";
            bindings = <&kp SQT>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        per_shift_ques: per_shift_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "PER_SHIFT_QUES";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Y    &kp C             &kp L  &kp M          &kp K          &kp Z      &kp F       &kp U               &kp COMMA         &kp SQT
&lt 1 I  &mt LEFT_SHIFT S  &kp R  &lt 3 T        &kp G          &kp P      &kp N       &kp E               &mt LEFT_SHIFT A  &lt 2 O
&kp Q    &kp V             &kp W  &kp D          &kp J          &kp B      &kp H       &mt LEFT_GUI ENTER  &kp PERIOD        &kp X
                                  &kp BACKSPACE  &kp BACKSLASH  &kp SPACE  &kp DOLLAR
            >;
        };

        left_layer {
            bindings = <
&trans  &trans     &kp AMPS        &kp GREATER_THAN  &trans  &kp PIPE       &kp GRAVE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HOME
&trans  &kp MINUS  &kp UNDERSCORE  &kp LESS_THAN     &trans  &kp SEMICOLON  &kp LCTRL  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON
&trans  &trans     &trans          &trans            &trans  &trans         &kp AT     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp END
                                   &trans            &trans  &trans         &trans
            >;
        };

        right_layer {
            bindings = <
&trans     &kp PLUS      &kp N9       &kp N7        &kp TAB    &trans  &kp NUMBER_6  &kp N8        &trans        &trans
&kp EQUAL  &kp N5        &kp N0       &kp NUMBER_3  &kp TILDE  &trans  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_4  &trans
&trans     &kp ASTERISK  &kp PERCENT  &kp HASH      &trans     &trans  &trans        &trans        &trans        &trans
                                      &trans        &trans     &trans  &trans
            >;
        };

        tri_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans          &trans           &trans
                        &trans  &trans  &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };
    };
};
